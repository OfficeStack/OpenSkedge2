{
  "name": "buffer",
  "description": "Node.js Buffer API, for the browser",
  "version": "2.8.2",
  "author": {
    "name": "Feross Aboukhadijeh",
    "email": "feross@feross.org",
    "url": "http://feross.org"
  },
  "bugs": {
    "url": "https://github.com/feross/buffer/issues"
  },
  "contributors": [
    {
      "name": "Romain Beauxis",
      "email": "toots@rastageeks.org"
    },
    {
      "name": "James Halliday",
      "email": "mail@substack.net"
    }
  ],
  "dependencies": {
    "base64-js": "0.0.7",
    "ieee754": "^1.1.4",
    "is-array": "^1.0.1"
  },
  "devDependencies": {
    "benchmark": "^1.0.0",
    "browserify": "^6.2.0",
    "is-nan": "^1.0.1",
    "tape": "^3.0.1",
    "zuul": "^1.12.0"
  },
  "homepage": "https://github.com/feross/buffer",
  "keywords": [
    "buffer",
    "browserify",
    "compatible",
    "browser",
    "arraybuffer",
    "uint8array",
    "dataview"
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/feross/buffer.git"
  },
  "scripts": {
    "test": "node ./bin/test.js",
    "test-browser": "zuul -- test/*.js",
    "test-browser-local": "zuul --local -- test/*.js",
    "test-node": "tape test/*.js && OBJECT_IMPL=true tape test/*.js",
    "perf": "browserify --debug perf/bracket-notation.js > perf/bundle.js && open perf/index.html",
    "perf-node": "node perf/bracket-notation.js && node perf/concat.js && node perf/copy-big.js && node perf/copy.js && node perf/new-big.js && node perf/new.js && node perf/readDoubleBE.js && node perf/readFloatBE.js && node perf/readUInt32LE.js && node perf/slice.js && node perf/writeFloatBE.js",
    "size": "browserify -r ./ | uglifyjs -c -m | gzip | wc -c"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/6..latest",
      "chrome/4..latest",
      "firefox/3..latest",
      "safari/5.1..latest",
      "opera/12.0..latest",
      "iphone/6",
      "ipad/6",
      "android-browser/latest"
    ]
  },
  "readme": "# buffer [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][npm-url] [![gratipay][gratipay-image]][gratipay-url]\n\n#### The buffer module from [node.js](http://nodejs.org/), for the browser.\n\n[![saucelabs][saucelabs-image]][saucelabs-url]\n\n[travis-image]: https://img.shields.io/travis/feross/buffer.svg?style=flat\n[travis-url]: https://travis-ci.org/feross/buffer\n[npm-image]: https://img.shields.io/npm/v/buffer.svg?style=flat\n[npm-url]: https://npmjs.org/package/buffer\n[downloads-image]: https://img.shields.io/npm/dm/buffer.svg?style=flat\n[gratipay-image]: https://img.shields.io/gittip/feross.svg?style=flat\n[gratipay-url]: https://www.gittip.com/feross\n[saucelabs-image]: https://saucelabs.com/browser-matrix/buffer.svg\n[saucelabs-url]: https://saucelabs.com/u/buffer\n\nWith [browserify](http://browserify.org), simply `require('buffer')` or use the `Buffer` global and you will get this module.\n\nThe goal is to provide an API that is 100% identical to\n[node's Buffer API](http://nodejs.org/api/buffer.html). Read the\n[official docs](http://nodejs.org/api/buffer.html) for the full list of properties,\ninstance methods, and class methods that are supported.\n\n## features\n\n- Manipulate binary data like a boss, in all browsers -- even IE6!\n- Super fast. Backed by Typed Arrays (`Uint8Array`/`ArrayBuffer`, not `Object`)\n- Extremely small bundle size (**5.04KB minified + gzipped**, 35.5KB with comments)\n- Excellent browser support (IE 6+, Chrome 4+, Firefox 3+, Safari 5.1+, Opera 11+, iOS, etc.)\n- Preserves Node API exactly, with one important difference (see below)\n- `.slice()` returns instances of the same type (Buffer)\n- Square-bracket `buf[4]` notation works, even in old browsers like IE6!\n- Does not modify any browser prototypes or put anything on `window`\n- Comprehensive test suite\n\n\n## install\n\nTo use this module directly (without browserify), install it:\n\n```bash\nnpm install buffer\n```\n\nThis module was previously called **native-buffer-browserify**, but please use **buffer**\nfrom now on.\n\n\n## usage\n\nThe module's API is identical to node's `Buffer` API. Read the\n[official docs](http://nodejs.org/api/buffer.html) for the full list of properties,\ninstance methods, and class methods that are supported.\n\nAs mentioned above, `require('buffer')` or use the `Buffer` global with\n[browserify](http://browserify.org) and this module will automatically be included\nin your bundle. Almost any npm module will work in the browser, even if it assumes that\nthe node `Buffer` API will be available.\n\nTo depend on this module explicitly (without browserify), require it like this:\n\n```js\nvar Buffer = require('buffer/').Buffer  // note: the trailing slash is important!\n```\n\nTo require this module explicitly, use `require('buffer/')` which tells the node.js module\nlookup algorithm (also used by browserify) to use the **npm module** named `buffer`\ninstead of the **node.js core** module named `buffer`!\n\n\n## how does it work?\n\nThe `Buffer` constructor returns instances of `Uint8Array` that are augmented with function properties for all the `Buffer` API functions. We use `Uint8Array` so that square bracket notation works as expected -- it returns a single octet. By augmenting the instances, we can avoid modifying the `Uint8Array` prototype.\n\n\n## differences\n\n#### IMPORTANT: always use `Buffer.isBuffer` instead of `instanceof Buffer`\n\nThe Buffer constructor returns a `Uint8Array` (with all the Buffer methods added as\nproperties on the instance) for performance reasons, so `instanceof Buffer` won't work. In\nnode, you can use either `Buffer.isBuffer` or `instanceof Buffer` to check if an object\nis a `Buffer`. But, in the browser you must use `Buffer.isBuffer` to detect the special\n`Uint8Array`-based Buffers.\n\n#### Minor: `buf.slice()` does not modify parent buffer's memory in old browsers\n\nIf you only support modern browsers (specifically, those with typed array support), then\nthis issue does not affect you.\n\nIn node, the `slice()` method returns a new `Buffer` that shares underlying memory with\nthe original Buffer. When you modify one buffer, you modify the other. [Read more.](http://nodejs.org/api/buffer.html#buffer_buf_slice_start_end)\n\nThis works correctly in browsers with typed array support (\\* with the exception of Firefox older than version 30). Browsers that lack typed arrays get an alternate buffer implementation based on `Object` which has no mechanism to point separate `Buffer`s to the same underlying slab of memory.\n\n\\* *Firefox older than version 30 gets the `Object` implementation -- not the typed arrays one -- because of [this\nbug](https://bugzilla.mozilla.org/show_bug.cgi?id=952403) (now fixed!) that made it impossible to add properties to a typed array.*\n\n\n## tracking the latest node api\n\nThis module tracks the Buffer API in the latest (unstable) version of node.js. The Buffer\nAPI is considered **stable** in the\n[node stability index](http://nodejs.org/docs/latest/api/documentation.html#documentation_stability_index),\nso it is unlikely that there will ever be breaking changes.\nNonetheless, when/if the Buffer API changes in node, this module's API will change\naccordingly.\n\n## performance\n\nSee perf tests in `/perf`.\n\n`BrowserBuffer` is the browser `buffer` module (this repo). `Uint8Array` is included as a\nsanity check (since `BrowserBuffer` uses `Uint8Array` under the hood, `Uint8Array` will\nalways be at least a bit faster). Finally, `NodeBuffer` is the node.js buffer module,\nwhich is included to compare against.\n\n```\n# Chrome 38\n\nBrowserBuffer#bracket-notation x 11,457,464 ops/sec ±0.86% (66 runs sampled) bundle.js:5262\nUint8Array#bracket-notation x 10,824,332 ops/sec ±0.74% (65 runs sampled) bundle.js:5262\nFastest is BrowserBuffer#bracket-notation\n\nBrowserBuffer#concat x 450,532 ops/sec ±0.76% (68 runs sampled) bundle.js:5267\nUint8Array#concat x 1,368,911 ops/sec ±1.50% (62 runs sampled) bundle.js:5267\nFastest is Uint8Array#concat\n\nBrowserBuffer#copy(16000) x 903,001 ops/sec ±0.96% (67 runs sampled) bundle.js:5261\nUint8Array#copy(16000) x 1,422,441 ops/sec ±1.04% (66 runs sampled) bundle.js:5261\nFastest is Uint8Array#copy(16000)\n\nBrowserBuffer#copy(16) x 11,431,358 ops/sec ±0.46% (69 runs sampled) bundle.js:5261\nUint8Array#copy(16) x 13,944,163 ops/sec ±1.12% (68 runs sampled) bundle.js:5261\nFastest is Uint8Array#copy(16)\n\nBrowserBuffer#new(16000) x 106,329 ops/sec ±6.70% (44 runs sampled) bundle.js:5253\nUint8Array#new(16000) x 131,001 ops/sec ±2.85% (31 runs sampled) bundle.js:5253\nFastest is Uint8Array#new(16000)\n\nBrowserBuffer#new(16) x 1,554,491 ops/sec ±1.60% (65 runs sampled) bundle.js:5253\nUint8Array#new(16) x 6,623,930 ops/sec ±1.66% (65 runs sampled) bundle.js:5253\nFastest is Uint8Array#new(16)\n\nBrowserBuffer#readDoubleBE x 112,830 ops/sec ±0.51% (69 runs sampled) bundle.js:5274\nDataView#getFloat64 x 93,500 ops/sec ±0.57% (68 runs sampled) bundle.js:5274\nFastest is BrowserBuffer#readDoubleBE\n\nBrowserBuffer#readFloatBE x 146,678 ops/sec ±0.95% (68 runs sampled) bundle.js:5274\nDataView#getFloat32 x 99,311 ops/sec ±0.41% (67 runs sampled) bundle.js:5274\nFastest is BrowserBuffer#readFloatBE\n\nBrowserBuffer#readUInt32LE x 843,214 ops/sec ±0.70% (69 runs sampled) bundle.js:5274\nDataView#getUint32 x 103,024 ops/sec ±0.64% (67 runs sampled) bundle.js:5274\nFastest is BrowserBuffer#readUInt32LE\n\nBrowserBuffer#slice x 1,013,941 ops/sec ±0.75% (67 runs sampled) bundle.js:5257\nUint8Array#subarray x 1,903,928 ops/sec ±0.53% (67 runs sampled) bundle.js:5257\nFastest is Uint8Array#subarray\n\nBrowserBuffer#writeFloatBE x 61,387 ops/sec ±0.90% (67 runs sampled) bundle.js:5231\nDataView#setFloat32 x 141,249 ops/sec ±0.40% (66 runs sampled) bundle.js:5231\nFastest is DataView#setFloat32\n\n# Firefox 33\n\n\"BrowserBuffer#bracket-notation x 20,800,421 ops/sec ±1.84% (60 runs sampled)\" bundle.js:5262\n\"Uint8Array#bracket-notation x 20,826,235 ops/sec ±2.02% (61 runs sampled)\" bundle.js:5262\n\"Fastest is BrowserBuffer#bracket-notation,Uint8Array#bracket-notation\"\n\n\"BrowserBuffer#concat x 153,076 ops/sec ±2.32% (61 runs sampled)\" bundle.js:5267\n\"Uint8Array#concat x 1,255,674 ops/sec ±8.65% (52 runs sampled)\" bundle.js:5267\n\"Fastest is Uint8Array#concat\"\n\n\"BrowserBuffer#copy(16000) x 1,105,312 ops/sec ±1.16% (63 runs sampled)\" bundle.js:5261\n\"Uint8Array#copy(16000) x 1,615,911 ops/sec ±0.55% (66 runs sampled)\" bundle.js:5261\n\"Fastest is Uint8Array#copy(16000)\"\n\n\"BrowserBuffer#copy(16) x 16,357,599 ops/sec ±0.73% (68 runs sampled)\" bundle.js:5261\n\"Uint8Array#copy(16) x 31,436,281 ops/sec ±1.05% (68 runs sampled)\" bundle.js:5261\n\"Fastest is Uint8Array#copy(16)\"\n\n\"BrowserBuffer#new(16000) x 52,995 ops/sec ±6.01% (35 runs sampled)\" bundle.js:5253\n\"Uint8Array#new(16000) x 87,686 ops/sec ±5.68% (45 runs sampled)\" bundle.js:5253\n\"Fastest is Uint8Array#new(16000)\"\n\n\"BrowserBuffer#new(16) x 252,031 ops/sec ±1.61% (66 runs sampled)\" bundle.js:5253\n\"Uint8Array#new(16) x 8,477,026 ops/sec ±0.49% (68 runs sampled)\" bundle.js:5253\n\"Fastest is Uint8Array#new(16)\"\n\n\"BrowserBuffer#readDoubleBE x 99,871 ops/sec ±0.41% (69 runs sampled)\" bundle.js:5274\n\"DataView#getFloat64 x 285,663 ops/sec ±0.70% (68 runs sampled)\" bundle.js:5274\n\"Fastest is DataView#getFloat64\"\n\n\"BrowserBuffer#readFloatBE x 115,540 ops/sec ±0.42% (69 runs sampled)\" bundle.js:5274\n\"DataView#getFloat32 x 288,722 ops/sec ±0.82% (68 runs sampled)\" bundle.js:5274\n\"Fastest is DataView#getFloat32\"\n\n\"BrowserBuffer#readUInt32LE x 633,926 ops/sec ±1.08% (67 runs sampled)\" bundle.js:5274\n\"DataView#getUint32 x 294,808 ops/sec ±0.79% (64 runs sampled)\" bundle.js:5274\n\"Fastest is BrowserBuffer#readUInt32LE\"\n\n\"BrowserBuffer#slice x 349,425 ops/sec ±0.46% (69 runs sampled)\" bundle.js:5257\n\"Uint8Array#subarray x 5,965,819 ops/sec ±0.60% (65 runs sampled)\" bundle.js:5257\n\"Fastest is Uint8Array#subarray\"\n\n\"BrowserBuffer#writeFloatBE x 59,980 ops/sec ±0.41% (67 runs sampled)\" bundle.js:5231\n\"DataView#setFloat32 x 317,634 ops/sec ±0.63% (68 runs sampled)\" bundle.js:5231\n\"Fastest is DataView#setFloat32\"\n\n# Safari 8\n\n[Log] BrowserBuffer#bracket-notation x 10,279,729 ops/sec ±2.25% (56 runs sampled) (bundle.js, line 5262)\n[Log] Uint8Array#bracket-notation x 10,030,767 ops/sec ±2.23% (59 runs sampled) (bundle.js, line 5262)\n[Log] Fastest is BrowserBuffer#bracket-notation,Uint8Array#bracket-notation (bundle.js, line 5265)\n\n[Log] BrowserBuffer#concat x 144,138 ops/sec ±1.38% (65 runs sampled) (bundle.js, line 5267)\n[Log] Uint8Array#concat x 4,950,764 ops/sec ±1.70% (63 runs sampled) (bundle.js, line 5267)\n[Log] Fastest is Uint8Array#concat (bundle.js, line 5270)\n\n[Log] BrowserBuffer#copy(16000) x 1,058,548 ops/sec ±1.51% (64 runs sampled) (bundle.js, line 5261)\n[Log] Uint8Array#copy(16000) x 1,409,666 ops/sec ±1.17% (65 runs sampled) (bundle.js, line 5261)\n[Log] Fastest is Uint8Array#copy(16000) (bundle.js, line 5264)\n\n[Log] BrowserBuffer#copy(16) x 6,282,529 ops/sec ±1.88% (58 runs sampled) (bundle.js, line 5261)\n[Log] Uint8Array#copy(16) x 11,907,128 ops/sec ±2.87% (58 runs sampled) (bundle.js, line 5261)\n[Log] Fastest is Uint8Array#copy(16) (bundle.js, line 5264)\n\n[Log] BrowserBuffer#new(16000) x 101,663 ops/sec ±3.89% (57 runs sampled) (bundle.js, line 5253)\n[Log] Uint8Array#new(16000) x 22,050,818 ops/sec ±6.51% (46 runs sampled) (bundle.js, line 5253)\n[Log] Fastest is Uint8Array#new(16000) (bundle.js, line 5256)\n\n[Log] BrowserBuffer#new(16) x 176,072 ops/sec ±2.13% (64 runs sampled) (bundle.js, line 5253)\n[Log] Uint8Array#new(16) x 24,385,731 ops/sec ±5.01% (51 runs sampled) (bundle.js, line 5253)\n[Log] Fastest is Uint8Array#new(16) (bundle.js, line 5256)\n\n[Log] BrowserBuffer#readDoubleBE x 41,341 ops/sec ±1.06% (67 runs sampled) (bundle.js, line 5274)\n[Log] DataView#getFloat64 x 322,280 ops/sec ±0.84% (68 runs sampled) (bundle.js, line 5274)\n[Log] Fastest is DataView#getFloat64 (bundle.js, line 5277)\n\n[Log] BrowserBuffer#readFloatBE x 46,141 ops/sec ±1.06% (65 runs sampled) (bundle.js, line 5274)\n[Log] DataView#getFloat32 x 337,025 ops/sec ±0.43% (69 runs sampled) (bundle.js, line 5274)\n[Log] Fastest is DataView#getFloat32 (bundle.js, line 5277)\n\n[Log] BrowserBuffer#readUInt32LE x 151,551 ops/sec ±1.02% (66 runs sampled) (bundle.js, line 5274)\n[Log] DataView#getUint32 x 308,278 ops/sec ±0.94% (67 runs sampled) (bundle.js, line 5274)\n[Log] Fastest is DataView#getUint32 (bundle.js, line 5277)\n\n[Log] BrowserBuffer#slice x 197,365 ops/sec ±0.95% (66 runs sampled) (bundle.js, line 5257)\n[Log] Uint8Array#subarray x 9,558,024 ops/sec ±3.08% (58 runs sampled) (bundle.js, line 5257)\n[Log] Fastest is Uint8Array#subarray (bundle.js, line 5260)\n\n[Log] BrowserBuffer#writeFloatBE x 17,518 ops/sec ±1.03% (63 runs sampled) (bundle.js, line 5231)\n[Log] DataView#setFloat32 x 319,751 ops/sec ±0.48% (68 runs sampled) (bundle.js, line 5231)\n[Log] Fastest is DataView#setFloat32 (bundle.js, line 5234)\n\n# Node 0.11.14\n\nBrowserBuffer#bracket-notation x 10,489,828 ops/sec ±3.25% (90 runs sampled)\nUint8Array#bracket-notation x 10,534,884 ops/sec ±0.81% (92 runs sampled)\nNodeBuffer#bracket-notation x 10,389,910 ops/sec ±0.97% (87 runs sampled)\nFastest is Uint8Array#bracket-notation,BrowserBuffer#bracket-notation\n\nBrowserBuffer#concat x 487,830 ops/sec ±2.58% (88 runs sampled)\nUint8Array#concat x 1,814,327 ops/sec ±1.28% (88 runs sampled)\nNodeBuffer#concat x 1,636,523 ops/sec ±1.88% (73 runs sampled)\nFastest is Uint8Array#concat\n\nBrowserBuffer#copy(16000) x 1,073,665 ops/sec ±0.77% (90 runs sampled)\nUint8Array#copy(16000) x 1,348,517 ops/sec ±0.84% (89 runs sampled)\nNodeBuffer#copy(16000) x 1,289,533 ops/sec ±0.82% (93 runs sampled)\nFastest is Uint8Array#copy(16000)\n\nBrowserBuffer#copy(16) x 12,782,706 ops/sec ±0.74% (85 runs sampled)\nUint8Array#copy(16) x 14,180,427 ops/sec ±0.93% (92 runs sampled)\nNodeBuffer#copy(16) x 11,083,134 ops/sec ±1.06% (89 runs sampled)\nFastest is Uint8Array#copy(16)\n\nBrowserBuffer#new(16000) x 141,678 ops/sec ±3.30% (67 runs sampled)\nUint8Array#new(16000) x 161,491 ops/sec ±2.96% (60 runs sampled)\nNodeBuffer#new(16000) x 292,699 ops/sec ±3.20% (55 runs sampled)\nFastest is NodeBuffer#new(16000)\n\nBrowserBuffer#new(16) x 1,655,466 ops/sec ±2.41% (82 runs sampled)\nUint8Array#new(16) x 14,399,926 ops/sec ±0.91% (94 runs sampled)\nNodeBuffer#new(16) x 3,894,696 ops/sec ±0.88% (92 runs sampled)\nFastest is Uint8Array#new(16)\n\nBrowserBuffer#readDoubleBE x 109,582 ops/sec ±0.75% (93 runs sampled)\nDataView#getFloat64 x 91,235 ops/sec ±0.81% (90 runs sampled)\nNodeBuffer#readDoubleBE x 88,593 ops/sec ±0.96% (81 runs sampled)\nFastest is BrowserBuffer#readDoubleBE\n\nBrowserBuffer#readFloatBE x 139,854 ops/sec ±1.03% (85 runs sampled)\nDataView#getFloat32 x 98,744 ops/sec ±0.80% (89 runs sampled)\nNodeBuffer#readFloatBE x 92,769 ops/sec ±0.94% (93 runs sampled)\nFastest is BrowserBuffer#readFloatBE\n\nBrowserBuffer#readUInt32LE x 710,861 ops/sec ±0.82% (92 runs sampled)\nDataView#getUint32 x 117,893 ops/sec ±0.84% (91 runs sampled)\nNodeBuffer#readUInt32LE x 851,412 ops/sec ±0.72% (93 runs sampled)\nFastest is NodeBuffer#readUInt32LE\n\nBrowserBuffer#slice x 1,673,877 ops/sec ±0.73% (94 runs sampled)\nUint8Array#subarray x 6,919,243 ops/sec ±0.67% (90 runs sampled)\nNodeBuffer#slice x 4,617,604 ops/sec ±0.79% (93 runs sampled)\nFastest is Uint8Array#subarray\n\nBrowserBuffer#writeFloatBE x 66,011 ops/sec ±0.75% (93 runs sampled)\nDataView#setFloat32 x 127,760 ops/sec ±0.72% (93 runs sampled)\nNodeBuffer#writeFloatBE x 103,352 ops/sec ±0.83% (93 runs sampled)\nFastest is DataView#setFloat32\n```\n\n\n## credit\n\nThis was originally forked from [buffer-browserify](https://github.com/toots/buffer-browserify).\n\n\n## license\n\nMIT. Copyright (C) [Feross Aboukhadijeh](http://feross.org), and other contributors. Originally forked from an MIT-licensed module by Romain Beauxis.\n",
  "readmeFilename": "README.md",
  "_id": "buffer@2.8.2",
  "_from": "buffer@^2.3.0"
}
